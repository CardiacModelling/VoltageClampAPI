[[model]]
name: voltage_clamp_model_api
display_name: Lei et al., 2020 Voltage clamp model adapted for API
mmt_authors: Chon Lok Lei, Michael Clerx
version: 20212817
desc: """
    Voltage clamp model with standard compensation [1].

    [1] Accounting for variability in ion current recordings using a
        mathematical model of artefacts in voltage-clamp experiments.
        Chon Lok Lei, Michael Clerx, Dominic G. Whittaker, David J. Gavaghan,
        Teun P. de Boer, Gary R. Mirams.
        Phil. Trans. R. Soc. A, 378: 20190348, 2020.
        https://doi.org/10.1098/rsta.2019.0348
"""
membrane.V            = 0
voltage_clamp.V_clamp = 0
voltage_clamp.V_p     = 0
voltage_clamp.V_est   = 0
voltage_clamp.I_out   = 0

#
# Simulator variables: To be replaced with model variables
#
[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0
    bind pace

#
# Cell size: To be replaced with model variable
#
[cell]
Cm = 20 [pF]
    in [pF]
    desc: Cell capacitance

#
# Membrane potential: To be replaced with model version, modified as shown
# below.
#
[membrane]
use voltage_clamp.V_p, voltage_clamp.R_series, voltage_clamp.V_offset_eff
use voltage_clamp.I_leak
use cell.Cm
gm = 10 [nS]
    in [nS]
I_ion = gm * V
    in [pA]
I_ideal = gm * voltage_clamp.V_c
    in [pA]
dot(V) = (V_p + V_offset_eff - V) / (Cm * R_series) - (I_ion + I_leak) / cell.Cm
    in [mV]

#
# Voltage-clamp model
#
[voltage_clamp]
use cell.Cm
use membrane.V
V_c = engine.pace * 1 [mV]
    desc: Command voltage
    in [mV]
Cm_est = 25 [pF]
    in [pF]
    desc: Estimated cell capacitance

R_series_MOhm = 30 [MOhm]
    in [MOhm]
    desc: Series resistance
R_series_est_MOhm = 25 [MOhm]
    in [MOhm]
    desc: Estimated series resistance
R_series = R_series_MOhm * 1e-3 [GOhm/MOhm]
    in [GOhm]
    desc: Series resistance, converted to GOhm
R_series_est = R_series_est_MOhm * 1e-3 [GOhm/MOhm]
    in [GOhm]
    desc: Estimated series resistance, converted to GOhm

alpha_percentage = 0
    desc: Percentage series resistance compensation
alpha = alpha_percentage / 100
    desc: Compensation, converted to a fraction

C_prs = 5 [pF]
    in [pF]
    desc: 'Parasitic'/pipette capacitance at electrode
C_prs_est = 4 [pF]
    in [pF]
    desc: Estimated 'parasitic'/pipette capacitance at electrode

V_offset_eff = 0 [mV]
    in [mV]
    desc: Effective voltage offset

tau_sum = 40e-3 [ms]
    in [ms]
    desc: Summation delay (approximately 5--70 us)
dot(V_clamp) = (V_c + (I_out * Cm + Cm_est * dot(V_est)) * R_series_est * alpha - V_clamp) / tau_sum
    desc: Clamp voltage
    in [mV]

tau_clamp = 0.8e-3 [ms]
    in [ms]
    desc: Clamp delay
dot(V_p) = (V_clamp - V_p) / tau_clamp
    in [mV]
    desc: Pipette voltage

tau_out = 7.5e-3 [ms]
    in [ms]
    desc: Feedback delay
dot(I_out) = (I_in - I_out) / tau_out
    in [A/F]
    desc: Measured current
I_out_pA = I_out * cell.Cm
    in [pA]

# Supercharging
# From https://doi.org/10.1007/978-1-4419-1229-9_4 Fig. 18
dot(V_est) = if(
        Cm_est < 1e-6 [pF] or R_series_est < 1e-6 [GOhm],
        0 [mV/ms],
        (V_c - V_est) / ((1 - alpha) * Cm_est * R_series_est)
    )
    in [mV]
    desc: Supercharging voltage

# Leak current, assumed to be linear (caused by the imperfect seal)
R_seal_MOhm = 500 [MOhm]
    in [MOhm]
    desc: Seal resistance
g_leak = 1 / (R_seal_MOhm * 1e-3 [GOhm/MOhm])
    in [1/GOhm]
    desc: Leak conductance (thought as inverse of seal resistance)
E_leak = -80 [mV]
    in [mV]
    desc: Leak reversal potential
I_leak = g_leak * (V - E_leak)
    in [pA]
    desc: Leak current

I_in = (
        (V_p - V + V_offset_eff) / R_series
        + C_prs * dot(V_p)
        - if(alpha == 0, 0 [pA], 
            + C_prs_est * dot(V_clamp)
            + Cm_est * if(R_series_est < 1e-6 [GOhm], dot(V_clamp), dot(V_est))
            )
    ) / Cm
    in [A/F]

# Leak subtracted (post-processed) current
R_seal_est_MOhm = 1000 [MOhm]
    in [MOhm]
    desc: Estimeated seal resistance
g_leak_est = 1 / (R_seal_est_MOhm * 1e-3 [GOhm/MOhm])
    in [nS]
    desc: Estimated leak conductance
E_leak_est = -80 [mV]
    in [mV]
    desc: Estimated leak reversal potential
I_post = I_out - g_leak_est * (V_c - E_leak_est) / Cm
    in [A/F]
    desc: Leak subtracted current
    label measured_current


[[protocol]]
# V     start   duration period repeats
0       0       50       0      0
20      next    50       0      0
0       next    50       0      0

[[script]]
import matplotlib.pyplot as plt
import myokit

m = get_model()
p = get_protocol()

s = myokit.Simulation(m, p)
#s.pre(1500)

d = s.run(150, log_interval=1e-2)

purple = '#636efa'
red = '#ef553b'
orange = '#ffa15a'
green = '#00cc96'

fig = plt.figure(figsize=(12, 6))
ax = fig.add_subplot(2, 1, 1)
ax.grid()
ax.plot(d.time(), d['voltage_clamp.V_c'], label='Command voltage', 
        color=purple, ds='steps-post')
ax.plot(d.time(), d['membrane.V'], '--', label='Membrane voltage', color=red)
ax.legend()

ax = fig.add_subplot(2, 1, 2)
ax.grid()
ax.set_ylim(-1e3, 1e3)
plt.plot(d.time(), d['voltage_clamp.I_out_pA'], label='Recorded current', 
         color=green)
plt.plot(d.time(), d['membrane.I_ion'], '--', label='Cell current', 
         color=purple)
plt.plot(d.time(), d['membrane.I_ideal'], ':', label='Ideal current', 
         color=red, ds='steps-post')


plt.show()

